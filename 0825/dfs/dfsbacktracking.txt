def dfs(s,g,d):
    
    global min_d #모든 재귀탐색에서 사용되므로 global로 선언하고
    
    #재귀 탐색중에 거리 d가 갱신된 최솟값 min_d보다 커지면, 더 탐색할 필요도 없이 return으로 끊어버립니다.
    #하지 않으면 시간초과
    if min_d < d:
        return

    #들어온 노드 s가 도달하고자 하는 노드 g와 같다면,
    if s == g:
        
        #현재 거리와 최소 거리를 비교해서 최솟값을 갱신합니다.
        if min_d > d:
            
            min_d = d
            return
    
    else:
        
        #아직 목표에 도달하지 못하면, s를 방문처리하고,
        visited[s] = 1

        for w in adjlist[s]: #s에 인접한 정점중에
            
            if visited[w] == 0: #방문하지 않은 정점 w에 대하여,
                
                dfs(w,g,d+1) #거리 1을 증가시키고 w로 들어가 재귀탐색을 시작합니다.
                
                visited[w] = 0 #w에 대한 모든 재귀탐색이 끝나면, visited[w]= 0으로 바꾼다음에 다음 반복문을 수행하도록 합니다.
            

T = int(input())

for t in range(1,T+1):

    ######입력을 받습니다
    
    v,e = map(int,input().split())

    adjlist = [[] for _ in range(v+1)]

    for _ in range(e):
        
        a,b = map(int,input().split())

        adjlist[a].append(b)
        adjlist[b].append(a)
    
    s,g = map(int,input().split())

    #방문배열을 만들고
    visited = [0] * (v+1)

    #간선의 수가 1000개니까, 최소 거리는 1000을 넘을 수 없습니다.
    min_d = 1000

    #dfs로 s에서 g로 가는 모든 재귀경로를 탐색하여 최솟값을 갱신합니다 
    dfs(s,g,0)

    #모든 경로를 탐색했는데도 최솟값이 1000이라면, 도달하지 못한것이므로
    if min_d == 1000:
        
        min_d = 0 #0으로 바꾸고 출력합니다

    print('#'+str(t),min_d,sep=' ')