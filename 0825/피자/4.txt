T = int(input())

for t in range(1,T+1):
    
    N,M = map(int,input().split())

####(치즈양, 피자번호)를 원소로 하는 리스트를 생성합니다

    c_list = list(map(int,input().split()))

    c_queue = []

    for i in range(1,M+1):
        
        c_queue.append((c_list[i-1],i))

##c_queue에서 왼쪽 원소부터 하나씩 빼와서 화덕의 크기 N만큼 채워줍니다.

    fire = [0] * N
        
    ###피자넣기

    for i in range(N):
        
        fire[i] = c_queue[i]
    
##남아있는 피자 수와 다 구운 피자 수를 세기 위한 변수

    remain = M - N
    complete = 0
        
    ##피자굽기

    while 1:
        
        a,num = fire[0] #화덕의 0번째 원소를 빼와서

#다 구운 피자 수가 M-1이면 반복문을 종료하고 마지막 피자를 출력할 것입니다.
        if complete == M-1: 
            
            break

#화덕의 1번째 원소부터 왼쪽으로 한칸씩 밀어낼겁니다.
#1번 > 0번, 2번> 1번,... n-1번은 n번
        for j in range(1,N):
          
            fire[j-1] = fire[j]
        
#빼온 0번째 원소의 치즈 양을 절반으로 줄일때 0이 된다면.. 다 구웠다는 뜻이므로

        if a // 2 == 0:
            
            if remain == 0: #남아있는 피자 수가 존재하지 않는다면,
                
                complete += 1 #구운 피자 수를 증가시키고
                fire.pop() #화덕의 오른쪽 원소를 pop하여 제거합니다.(사이즈 감소시키기)
                N -= 1 #화덕의 사이즈를 줄여서 한칸씩 밀어낼때 사용
                pass
            
            else:
#남아있는 피자가 존재한다면            
#남아있는 피자 큐에서 화덕에 채워넣습니다.

#5개가 남아있다면, [2,4,1,3,5]에서 차례대로 인덱스가 -5,-4,-3,-2,-1이므로, -remain 인덱스를 fire의 마지막 원소(-1)에 넣으면 됩니다
                fire[-1] = c_queue[-remain]
                complete += 1 #집어넣고 구운 피자 수를 증가시키고
                remain -= 1 #남아있는 피자 수를 감소시킵니다.
        
        else: #녹은 치즈 양이 0이 아니라면,
            
            fire[-1] =(a//2,num) #왼쪽으로 모두 밀어낸 fire의 마지막 원소에 (녹인 치즈양,번호)를 다시 집어넣습니다.

#구운 피자 수가 M-1이면, 반복문이 종료되고, 0번째 원소로 빼온 NUM이 정답이 됩니다.
    
    print('#'+str(t),num,sep=' ')